{"version":3,"file":"static/js/536.1dee6c36.chunk.js","mappings":"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","sources":["api/api.js","constants/constantsApi.js","api/addRating.js","api/getGenres.js","api/getMovieBySearch.js","api/getMovieCast.js","api/getMovieDetails.js","api/getMovieReviews.js","api/getMovieTrailer.js","api/getNowPlaying.js","api/getSimilarMovie.js","api/getPopular.js","api/getTopRated.js","api/getTrends.js","api/getUpcoming.js","components/ReviewList/ReviewItem.jsx","utils/getAvatarLink.js","components/ReviewList/ReviewList.jsx","pages/MovieInDetails/ReviewView.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { BASE_URL, API_KEY } from \"constants\";\n\nexport const customAxios = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const searchParams = {\n  query: '',\n  page: 1,\n};","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '3dd39359792eb7041e93855d90b9b314';","import { customAxios } from \"./api\";\n\nexport const addRating = async(id, rating) => {\n  const { data } = await customAxios.post(`/movie/${id}/${rating}`);\n  return data;\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\nexport const getGenres = async () => {\n  try {\n    const { data } = await customAxios.get('/genre/movie/list');\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import * as API from \"./api\";\nimport { toast } from \"react-toastify\";\n\n  \nexport const getMovieBySearch = async () => {\n  try {\n    const data = await API.customAxios.get(`/search/movie`, {params: API.searchParams});\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\nexport const getMovieCast = async (id) => {\n  try {\n    const data = await customAxios.get(`/movie/${id}/credits`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n \nexport const getMovieDetails = async (id) => {\n  try {\n    const { data } = await customAxios.get(`/movie/${id}`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\nexport const getMovieReviews = async (id) => {\n  try {\n    const data = await customAxios.get(`/movie/${id}/reviews`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\n\nexport const getMovieTrailer = async (id) => {\n  const { data } = await customAxios.get(`/movie/${id}/videos`);\n  return data;\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\nexport const getNowPlaying = async () => {\n  try {\n    const data = customAxios.get(`/movie/now_playing`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\nexport const getSimilarMovie = async (id) => {\n  try {\n    const data = await customAxios.get(`/movie/${id}/similar`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\n\nexport const getPopular = async () => {\n  try {\n    const data = customAxios.get(`/movie/popular`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\n\nexport const getTopRated = async () => {\n  try {\n    const data  = customAxios.get(`/movie/top_rated`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import * as API from \"./api\";\nimport { toast } from \"react-toastify\";\n\n\nexport const getTrends = async (page) => {\n  try {\n    const {data} = await API.customAxios.get(`/trending/movie/week`, {params: API.searchParams});\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import { customAxios } from \"./api\";\nimport { toast } from \"react-toastify\";\n\n\nexport const getUpcoming = async () => {\n  try {\n    const { data } = await customAxios.get(`/movie/upcoming`);\n    return data;\n  } catch (error) {\n    toast.error(`Oops, an error occurred! ${error}`);\n  };\n};","import styled from \"styled-components\";\nimport { breakpoints } from \"styleConfig/breakpoints\";\nimport { getAvatarLink } from \"utils/getAvatarLink\";\n\nconst Wrapper = styled.div`\npadding: 0 ${p => p.theme.space[2]}px ${p => p.theme.space[2]}px;\nmargin: 0 ${p => p.theme.space[1]}px ${p => p.theme.space[1]}px;\n`;\nconst Author = styled.div`\ndisplay: flex;\nalign-items: center;\n`;\nconst Avatar = styled.img`\nwidth: 45px;\nheight: 45px;\nborder-radius: ${p => p.theme.radii.round};\nbackground-color: ${p => p.theme.colors.black};\n`;\nconst NoAvatar = styled.div`\nwidth: 45px;\nheight: 45px;\nborder-radius: ${p => p.theme.radii.round};\nbackground-color: ${p => p.theme.colors.shadow};\n`;\nconst AuthorName = styled.span`\nmargin-left: ${p => p.theme.space[4]}px;\ntext-transform: uppercase;\ncolor: ${p => p.theme.colors.accent};\nfont-size: ${p => p.theme.fontSizes.s};\nfont-weight: ${p => p.theme.fontWeights.bold};\n`;\nconst UpdatedDateAt = styled.span`\nmargin-left: ${p => p.theme.space[2]}px;\ntext-transform: uppercase;\ncolor: ${p => p.theme.colors.shadow};\nfont-size: ${p => p.theme.fontSizes.s};\nfont-weight: ${p => p.theme.fontWeights.normal};\n`;\nconst Text = styled.p`\nfont-size: ${p => p.theme.fontSizes.s};\nfont-weight: ${p => p.theme.fontWeights.normal};\nline-height: 1.8;\n@media (${breakpoints.laptop}) {\n  font-size: ${p => p.theme.fontSizes.m};\n};\n`;\n\nexport const ReviewItem = ({\n  author, \n  content, \n  author_details, \n  updated_at\n}) => {\n  \n  const avatar = author_details.avatar_path;\n  const date = updated_at.slice(0,10);\n  return (\n    <Wrapper>\n      <Author>\n      {avatar ? <Avatar src={getAvatarLink(avatar)} /> : <NoAvatar />}\n        <AuthorName>{author}</AuthorName>\n        <UpdatedDateAt>{date}</UpdatedDateAt>\n      </Author>\n      <Text>{content}</Text>\n    </Wrapper>\n  );\n};","export const getAvatarLink = (link) => {\n  if(!link) return '';\n  if(link.includes('http'))return link.substring(1);\n  return `https://themoviedb.org/t/p/w45${link}`;\n};","import PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { ReviewItem } from \"./ReviewItem\";\n\nconst List = styled.ul`\ndisplay: flex;\nflex-direction: column;\nalign-items: flex-start;\njustify-content: center;\n`;\nconst Notification = styled.p`\npadding: ${p => p.theme.space[2]}px;\nfont-size: ${p => p.theme.fontSizes.l};\nfont-weight: ${p => p.theme.fontWeights.semibold};\nfont-family: ${p => p.theme.fonts.accent};\nfont-style: italic;\nmargin: 0 auto;\n`;\n\nexport const ReviewList = ({ reviews }) => {\nreturn (\n  <List>\n    {reviews.length > 0 ? (\n    reviews.map((item) => (\n      <li key={item.id}>\n        <ReviewItem {...item}/>\n      </li>\n      ))\n    ) : <Notification>No Reviews</Notification>\n    }\n  </List>\n  );\n};\n\nReviewList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      avatar: PropTypes.string,\n      content: PropTypes.string,\n      updated_at: PropTypes.string,\n      author_details: PropTypes.shape({\n        avatar_path: PropTypes.string,\n      }),\n    }),\n  ),\n};\n","import { useState, useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { ThreeDots } from  'react-loader-spinner';\nimport { getMovieReviews } from \"api\";\nimport { ReviewList} from \"components/ReviewList\";\n\n\nconst ReviewView = () => {\nconst [reviews, setReviews] = useState([]);\nconst { movieId } = useParams();\nconst [isLoading, setIsLoading] = useState(false);\n\nuseEffect(() => {\n  (async () => {\n    try {\n      const {data} = await getMovieReviews(movieId);\n        setReviews(data.results);\n    } catch (error) {\n      toast.info(`Something went wrong ${error}`);\n    } finally {setIsLoading(false)};\n  })();\n}, [movieId]);\n\n  return (\n    <>\n      {isLoading && <ThreeDots color=\"#eead71\" height={60} width={60} />}\n      <ReviewList reviews={reviews} />\n    </>\n  );\n};\n\nexport default ReviewView;"],"names":["customAxios","axios","baseURL","params","api_key","searchParams","query","page","addRating","id","rating","post","data","getGenres","get","toast","getMovieBySearch","API","getMovieCast","getMovieDetails","getMovieReviews","getMovieTrailer","getNowPlaying","getSimilarMovie","getPopular","getTopRated","getTrends","getUpcoming","Wrapper","styled","p","theme","space","Author","Avatar","radii","round","colors","black","NoAvatar","shadow","AuthorName","accent","fontSizes","s","fontWeights","bold","UpdatedDateAt","normal","Text","breakpoints","m","ReviewItem","link","author","content","author_details","updated_at","avatar","avatar_path","date","slice","src","includes","substring","List","Notification","l","semibold","fonts","ReviewList","reviews","length","map","item","useState","setReviews","movieId","useParams","isLoading","setIsLoading","useEffect","results","color","height","width"],"sourceRoot":""}