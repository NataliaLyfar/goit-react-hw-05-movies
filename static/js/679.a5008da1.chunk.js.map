{"version":3,"file":"static/js/679.a5008da1.chunk.js","mappings":"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","sources":["components/SearchBar/SearchBar.jsx","pages/MoviesSearchPage.jsx"],"sourcesContent":["import { useForm } from \"react-hook-form\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport { GoSearch } from \"react-icons/go\";\n\n\nconst SearchForm = styled.form`\nmargin: 0 auto ${p => p.theme.space[3]}px;\ndisplay: flex;\nalign-items: center;\nwidth: 100%;\nmax-width: 300px;\nborder-bottom: 1 px solid ${p => p.theme.colors.accent};\noverflow: hidden;\n`;\nconst SearchInput = styled.input`\ndisplay: inline-block;\nwidth: 100%;\nfont: inherit;\nfont-size: ${p => p.theme.fontSizes.m};\nborder: none;\nborder-bottom: 2px solid ${p => p.theme.colors.accent};\ncolor: ${p => p.theme.colors.white};\nbackground-color: transparent;\noutline: none;\npadding-left: ${p => p.theme.space[1]}px;\npadding-right: ${p => p.theme.space[0]}px;\n  &::placeholder {\n    font: inherit;\n    font-size: ${p => p.theme.fontSizes.s};\n    color: ${p => p.theme.colors.white};\n  };\n`;\nconst SearchButton = styled.button`\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nborder: 0;\nbackground: transparent;\ntransition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\ncursor: pointer;\noutline: none;\n  svg{\n    width: 20px;\n    height: 20px;\n    color: ${p => p.theme.colors.white};\n  };\n`;\n\n\nexport const SearchBar = ({ onSearch }) => {\nconst {register, handleSubmit, resetField} = useForm();\n\nconst onSubmit = data => {\n  onSearch(data.query);\n  resetField('query');\n};\n\nreturn (\n    <SearchForm onSubmit={handleSubmit(onSubmit)} >\n        <SearchInput\n        type=\"text\"\n        placeholder=\"Search for movie\"\n        {...register(\"query\")}\n        autoComplete=\"off\"\n        autoFocus\n        />\n        <SearchButton type=\"submit\"><GoSearch /></SearchButton>\n    </SearchForm>\n  );\n};\n\nSearchBar.propTypes = {\n  onSearch: PropTypes.func,\n};","import { useState, useEffect } from \"react\";\nimport { useSearchParams} from \"react-router-dom\";\nimport { toast } from 'react-toastify';\nimport styled from \"styled-components\";\nimport Iframe from \"react-iframe\";\nimport { ThreeDots } from  'react-loader-spinner';\nimport * as API from \"api\";\nimport { dataMovie } from \"utils/dataMovie\";\nimport { MoviesGallery } from \"components/MoviesGallery\";\nimport { Container } from \"components/ui/Container\";\nimport { Section } from \"components/ui/Section\";\nimport { SearchBar } from \"components/SearchBar\";\nimport { Button } from \"components/ui/buttons\";\nimport { Title } from \"components/ui/Title\";\nimport { Slider } from \"components/Swiper\";\n\n\nconst TrailerWrapper = styled.div`\nmargin-bottom: ${p => p.theme.space[3]}px;\n`;\n\nconst MoviesSearch = () => {\nconst [movies, setMovies] = useState([]);\nconst [page, setPage] = useState(1);\nconst [queryParam, setQueryParam] = useSearchParams({});\nconst [nowPlaying, setNowPlaying] = useState([]);\nconst [topRated, setTopRated] = useState([]);\nconst [popularId, setTPopularId] = useState([]);\nconst [trailer, setTrailer] = useState(\"\");\nconst [genres, setGenres] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\nconst query = queryParam.get('query') ?? '';\n\n\nuseEffect(() => {\n  (async () => {\n    try {\n      const {genres} = await API.getGenres();\n      setGenres(genres);\n    } catch (error) {\n      toast.info(`Something went wrong ${error}`);\n    };\n  })();\n}, []);\n\n\nuseEffect(() => {\n  if(!query){\n    return;\n  };\n  (async () => {\n    API.searchParams.page = page;\n    API.searchParams.query = query;\n    try {\n        setIsLoading(true);\n        const {...response} = await API.getMovieBySearch(API.searchParams);\n        const { data } = response;\n        const newMovies = dataMovie(data.results, genres);\n          if(newMovies.length > 0){\n            if(API.searchParams.page === 1){\n              setMovies([...newMovies]);\n            } else {\n              setMovies(prevState => [...prevState,...newMovies]);};\n          } else {\n            toast.info('Sorry, there are no movies matching your search query. Please try again.');\n          };\n        } catch (error) {\n          toast.info(`Something went wrong ${error}`);\n        } finally {setIsLoading(false)};   \n  })();\n}, [genres, page, query]);\n\nuseEffect(() => {\n  (async () => {\n    try {\n        setIsLoading(true);\n        const {data} = await API.getNowPlaying();\n        setNowPlaying([...data.results]);\n        const {...response} = await API.getTopRated();\n        setTopRated([...response.data.results]);\n        const {...datas} = await API.getPopular();\n        setTPopularId(datas.data.results[0].id);\n        } catch (error) {\n          toast.info(`Something went wrong ${error}`);\n        } finally {setIsLoading(false)};\n  })();\n}, [genres]);\n\nuseEffect(() => {\n  (async () => {\n    try {\n      setIsLoading(true);\n      const data = await API.getMovieTrailer(popularId);\n      if(data?.results){\n      setTrailer(data.results[0]);}\n    } catch (error) {\n    } finally {setIsLoading(false)};\n  })();\n}, [popularId]);\n\nconst handleSearch = (query) => {\n  const nextParams = query!== \"\" ? \n  {\"query\": query} : {};\n  setQueryParam(nextParams);\n  setPage(1);\n  setMovies([]);\n};\n\nconst handleLoadMore = () => {\n  setPage(page => page + 1);\n};\n\nreturn (\n    <Container>\n      {isLoading && <ThreeDots color=\"#eead71\" height={60} width={60}/>}\n      <Section>\n        <SearchBar onSearch={handleSearch} />\n        {nowPlaying.length > 0 && (\n          <>\n            <Title>Now playing</Title>\n            <Slider movies={nowPlaying}/>\n          </>)}\n        {movies.length > 0 && <MoviesGallery movies={movies} /> }\n        {movies.length >= 20 && <Button onClick={handleLoadMore}>Load more</Button>}           \n        {movies.length === 0 && trailer && \n          <TrailerWrapper >\n            <Iframe trailer={trailer}\n              url={`https://www.youtube.com/embed/${trailer.key}`}\n              width=\"100%\"\n              height=\"600px\"\n              allowFullScreen/>\n          </TrailerWrapper>}\n        {nowPlaying.length > 0 && (\n          <>\n          <Title>Top rated</Title>\n          <Slider movies={topRated}/>\n          </>)}\n      </Section>\n    </Container>\n  );\n};\n\nexport default MoviesSearch;"],"names":["SearchForm","styled","p","theme","space","colors","accent","SearchInput","fontSizes","m","white","s","SearchButton","SearchBar","onSearch","useForm","register","handleSubmit","resetField","onSubmit","data","query","type","placeholder","autoComplete","autoFocus","TrailerWrapper","useState","movies","setMovies","page","setPage","useSearchParams","queryParam","setQueryParam","nowPlaying","setNowPlaying","topRated","setTopRated","popularId","setTPopularId","trailer","setTrailer","genres","setGenres","isLoading","setIsLoading","get","useEffect","API","toast","response","newMovies","dataMovie","results","length","prevState","datas","id","Container","color","height","width","Section","Title","MoviesGallery","onClick","url","key","allowFullScreen"],"sourceRoot":""}